name: Deploy Application

on:
  push:
    branches:
      - dev-github-actions
      # - main
      # - develop
  # pull_request:
  #   branches:
  #     - develop
  #     - main

jobs:
  # lint-and-test:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
          
  #     - name: Install dependencies
  #       run: npm ci
  #       working-directory: ./quizapp
        
  #     - name: Lint code
  #       run: npm run lint
  #       working-directory: ./quizapp
        
  #     - name: Run tests
  #       run: npm test -- --passWithNoTests --coverage
  #       working-directory: ./quizapp
        
  #     - name: Upload test coverage
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: coverage
  #         path: ./quizapp/coverage
          
  #     - name: Check for vulnerabilities
  #       run: npm audit --production
  #       working-directory: ./quizapp
  #       continue-on-error: true
  
  build:
    # needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './quizapp/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./quizapp
        
      - name: Build application
        run: npm run build
        working-directory: ./quizapp
        env:
          REACT_APP_API_BASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}
          REACT_APP_VERSION: ${{ github.sha }}
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./quizapp/build
  
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/dev-github-actions'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to S3 (Staging)
        run: aws s3 sync ./build s3://${{ secrets.STAGING_S3_BUCKET }} --delete
      
      - name: Invalidate CloudFront cache (Staging)
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} --paths "/*"
        
      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
          text: '스테이징 배포가 완료되었습니다! :rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
  
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to S3 (Production)
        run: aws s3 sync ./build s3://${{ secrets.PRODUCTION_S3_BUCKET }} --delete
      
      - name: Invalidate CloudFront cache (Production)
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} --paths "/*"
        
      - name: Create release tag
        uses: actions/github-script@v6
        with:
          script: |
            const { GITHUB_REF, GITHUB_SHA } = process.env;
            const tagName = `release-${new Date().toISOString().slice(0, 10)}-${GITHUB_SHA.slice(0, 7)}`;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: GITHUB_SHA
            });
            
      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
          text: ':tada: 프로덕션 배포가 완료되었습니다! :rocket:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
