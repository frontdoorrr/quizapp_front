name: Deploy Application

# 워크플로우 트리거 설정
# 현재는 dev-github-actions 브랜치에 푸시할 때만 실행됩니다.
# main과 develop 브랜치는 주석 처리되어 있습니다.
on:
  push:
    branches:
      - dev-github-actions
      # - main
      # - develop
  # pull_request:
  #   branches:
  #     - develop
  #     - main

jobs:
  # 린트 및 테스트 작업 (현재 비활성화)
  # lint-and-test:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'npm'
          
  #     - name: Install dependencies
  #       run: npm ci
  #       working-directory: ./quizapp
        
  #     - name: Lint code
  #       run: npm run lint
  #       working-directory: ./quizapp
        
  #     - name: Run tests
  #       run: npm test -- --passWithNoTests --coverage
  #       working-directory: ./quizapp
        
  #     - name: Upload test coverage
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: coverage
  #         path: ./quizapp/coverage
          
  #     - name: Check for vulnerabilities
  #       run: npm audit --production
  #       working-directory: ./quizapp
  #       continue-on-error: true
  
  # 애플리케이션 빌드 작업
  # 모든 브랜치에서 실행되며, 빌드 결과물을 아티팩트로 저장합니다.
  build:
    # needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './quizapp/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./quizapp
        
      # CI=false 설정으로 ESLint 경고를 오류로 처리하지 않습니다.
      # 브랜치에 따라 다른 API URL을 사용합니다(main: PROD_API_URL, 그 외: STAGING_API_URL).
      - name: Build application
        run: npm run build
        working-directory: ./quizapp
        env:
          CI: false
          REACT_APP_API_BASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || secrets.STAGING_API_URL }}
          REACT_APP_VERSION: ${{ github.sha }}
      
      # 빌드 결과물을 GitHub Actions 아티팩트로 저장합니다.
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./quizapp/build
  
  # 스테이징 환경 배포 작업
  # develop 또는 dev-github-actions 브랜치에서만 실행됩니다.
  # 테스트 및 QA 목적의 환경에 배포합니다.
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/dev-github-actions'
    runs-on: ubuntu-latest
    
    steps:
      # 빌드 아티팩트를 다운로드합니다.
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build
      
      # AWS 자격 증명을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_S3_BUCKET_REGION }}
      
      # 스테이징 S3 버킷에 빌드 결과물을 업로드합니다.
      - name: Deploy to S3 (Staging)
        run: aws s3 sync ./build s3://${{ secrets.AWS_S3_BUCKET_NAME_STAGING }} --delete
      
  #     # # 스테이징 CloudFront 캐시를 무효화하여 최신 변경사항이 즉시 반영되도록 합니다.
  #     # - name: Invalidate CloudFront cache (Staging)
  #     #   run: aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT_ID }} --paths "/*"
        
  #     # # 배포 성공 시 Slack에 알림을 보냅니다.
  #     # - name: Notify Slack on success
  #     #   uses: 8398a7/action-slack@v3
  #     #   with:
  #     #     status: ${{ job.status }}
  #     #     fields: repo,message,commit,author,action,eventName,workflow
  #     #     text: '스테이징 배포가 완료되었습니다! :rocket:'
  #     #   env:
  #     #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #     #   if: success()
  
  # # 프로덕션 환경 배포 작업
  # # main 브랜치에서만 실행됩니다.
  # # 실제 사용자가 접근하는 라이브 환경에 배포합니다.
  # deploy-production:
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   environment: production
    
  #   steps:
  #     # 빌드 아티팩트를 다운로드합니다.
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build
  #         path: ./build
      
  #     # AWS 자격 증명을 설정합니다.
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
      
  #     # 프로덕션 S3 버킷에 빌드 결과물을 업로드합니다.
  #     - name: Deploy to S3 (Production)
  #       run: aws s3 sync ./build s3://${{ secrets.PRODUCTION_S3_BUCKET }} --delete
      
  #     # 프로덕션 CloudFront 캐시를 무효화하여 최신 변경사항이 즉시 반영되도록 합니다.
  #     - name: Invalidate CloudFront cache (Production)
  #       run: aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_ID }} --paths "/*"
        
  #     # 배포 버전에 대한 Git 태그를 생성합니다.
  #     - name: Create release tag
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const { GITHUB_REF, GITHUB_SHA } = process.env;
  #           const tagName = `release-${new Date().toISOString().slice(0, 10)}-${GITHUB_SHA.slice(0, 7)}`;
  #           github.rest.git.createRef({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             ref: `refs/tags/${tagName}`,
  #             sha: GITHUB_SHA
  #           });
            
  #     # 배포 성공 시 Slack에 알림을 보냅니다.
  #     - name: Notify Slack on success
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: ${{ job.status }}
  #         fields: repo,message,commit,author,action,eventName,workflow
  #         text: ':tada: 프로덕션 배포가 완료되었습니다! :rocket:'
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       if: success()
